name: Deploy application

on:
  push:

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: dwk-clster
  GKE_ZONE: europe-north1-b
  BE_IMAGE: todo-backend
  APP_IMAGE: todo-app
  BRDC_IMAGE: todo-broadcaster
  CRON_IMAGE: todo-cron
  BACKUP_IMAGE: backup-cron
  NAMESPACE: ${{ github.ref_name == 'main' && 'default' || github.ref_name }}
  BRANCH: ${{ github.ref_name }}

jobs:
  build-publish-deploy:
    name: Build, Publish and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GKE_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2

      - name: 'Use gcloud CLI'
        run: gcloud info

      - run: gcloud --quiet auth configure-docker

      - name: 'Get GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          project_id: '${{ env.PROJECT_ID }}'
          location: '${{ env.GKE_ZONE }}'

      - run: kubectl version

      - name: Build and publish backend
        run: |-
          docker build --tag "gcr.io/$PROJECT_ID/$BE_IMAGE:$BRANCH-$GITHUB_SHA" ./backend
          docker push "gcr.io/$PROJECT_ID/$BE_IMAGE:$BRANCH-$GITHUB_SHA"

      - name: Build and publish app
        run: |-
          docker build --tag "gcr.io/$PROJECT_ID/$APP_IMAGE:$BRANCH-$GITHUB_SHA" ./app
          docker push "gcr.io/$PROJECT_ID/$APP_IMAGE:$BRANCH-$GITHUB_SHA"

      - name: Build and broadcaster 
        run: |-
          docker build --tag "gcr.io/$PROJECT_ID/$BRDC_IMAGE:$BRANCH-$GITHUB_SHA" ./broadcaster
          docker push "gcr.io/$PROJECT_ID/$BRDC_IMAGE:$BRANCH-$GITHUB_SHA"

      - name: Build and publish wikipedia cron
        run: |-
          docker build --tag "gcr.io/$PROJECT_ID/$CRON_IMAGE:$BRANCH-$GITHUB_SHA" ./cron
          docker push "gcr.io/$PROJECT_ID/$CRON_IMAGE:$BRANCH-$GITHUB_SHA"

      - name: Build and publish backup cron
        run: |-
          docker build --tag "gcr.io/$PROJECT_ID/$BACKUP_IMAGE:$BRANCH-$GITHUB_SHA" ./backup
          docker push "gcr.io/$PROJECT_ID/$BACKUP_IMAGE:$BRANCH-$GITHUB_SHA"

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2

      - name: Deploy
        run: |-   
          kubectl create namespace $NAMESPACE || true
          kubectl config set-context --current --namespace=$NAMESPACE
          kustomize edit set namespace $NAMESPACE
          kustomize edit set image PROJECT/BE_IMAGE=gcr.io/$PROJECT_ID/$BE_IMAGE:$BRANCH-$GITHUB_SHA
          kustomize edit set image PROJECT/APP_IMAGE=gcr.io/$PROJECT_ID/$APP_IMAGE:$BRANCH-$GITHUB_SHA
          kustomize edit set image PROJECT/BRDC_IMAGE=gcr.io/$PROJECT_ID/$BRDC_IMAGE:$BRANCH-$GITHUB_SHA
          kustomize edit set image PROJECT/CRON_IMAGE=gcr.io/$PROJECT_ID/$CRON_IMAGE:$BRANCH-$GITHUB_SHA
          kustomize edit set image PROJECT/BACKUP_IMAGE=gcr.io/$PROJECT_ID/$BACKUP_IMAGE:$BRANCH-$GITHUB_SHA
          kustomize build . | kubectl apply -f -
          kubectl rollout status deployment todo-app-dep
          kubectl get services -o wide

      #- name: arco
      #  run: |
      #    curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
      #    chmod +x ./kubectl-argo-rollouts-linux-amd64
      #    sudo mv ./kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
      #    kubectl argo rollouts version
      #    kubectl argo rollouts status todo-backend-dep